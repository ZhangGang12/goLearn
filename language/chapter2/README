
变量

数值类型变量对应的零值是0，布尔类型变量对应的零值是false，字符串类型对应的零值是空字符串，接口或引用类型（包括slice、指针、map、chan和函数）变量对应的零值是nil
总结：零值在go中分4种情况 0、false、""、nil
指针
&x 标识指向x的指针，指针对应的数据类型是 *T，指针的零值是nil
```
x := 1
p := &x         // p, of type *int, points to x
fmt.Println(*p) // "1"
*p = 2          // equivalent to x = 2
fmt.Println(x)  // "2"
```
指针比较相等（坑点）：只有当它们指向同一个变量或全部是nil时才相等。
理解指针：为一个对象新建一个指针的时候，本质上就是为这个对象取一个别名

声明周期：
局部变量的生命周期则是动态的
通常变量会被分派到堆上或者栈上，至于被分配在哪个上面，是由编译器决定的，而不是声明方式。其本质是由程序对变量的使用方式决定的

元祖赋值：
```
x, y = y, x
a[i], a[j] = a[j], a[i]
```
go中有些表达式会返回多个值，但是有三种隐藏的返回两个值的方法：map、断言、channel
```
v, ok = m[key]             // map lookup
v, ok = x.(T)              // type assertion
v, ok = <-ch               // channel receive
```
