go test -bench=.
```
goos: darwin
goarch: arm64
pkg: chapter1
BenchmarkEchoV3-8       31692483                37.11 ns/op
BenchmarkEchoV4-8       1000000000               0.2711 ns/op
PASS
ok      chapter1        2.842s
```
说明：
EchoV3 执行了 31692483 次，每次花费37.11 ns
EchoV3 执行了 1000000000 次，每次花费0.2711 ns

go map 是无须的，现在很多语言的map都是无需的，能有效防止有序的hash碰撞攻击
比如：
一个 Web 应用程序使用哈希表（如 Go 的 map 或 Python 的 dict）来存储用户提交的表单数据。
表单字段的键作为哈希表的键，表单内容作为值。
哈希表通过哈希函数将键映射到特定位置。
漏洞利用：攻击者通过构造一组特殊的键，这些键在特定哈希函数下会映射到相同的位置，导致严重的哈希碰撞。

lissajous:
go run main.go lissajous.go > out.gif

geturl:
go build -o fetch main.go geturl.go  
./fetch http://gopl.io 
./fetch http://gopl.iop  
./fetch gopl.io 

fetchall:
```
go run main.go fetchall.go https://golang.org http://gopl.io https://godoc.org
1.78s     4154  http://gopl.io
Get "https://golang.org": dial tcp 172.217.12.145:443: i/o timeout
while reading https://godoc.org: read tcp 10.36.234.226:61166->34.149.140.181:443: read: operation timed out
49.56s elapsed
```
说明：dial tcp 是在tcp建立连接的时候超时，read: operation 是在建立连接之后读取数据的时候超时导致的
fetchallV1 
go run main.go fetchall.go https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching
0.93s   232349 200 OK https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching
0.59s   232349 200 OK https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching
1.09s elapsed

在浏览器中刷新https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Caching 第一次返回200 ok Cache-Contrl 对应的value是：public,max-age=3600 ，第二次返回的就是304 Not Modified 
所以缓存机制需要浏览器支持，接口每次请求都不会有缓存